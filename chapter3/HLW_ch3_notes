Chapter 3 Notes:


The Unix system kernel presents many of the device I/O interfaces to user processes as files. These device files are sometiomes called "device nodes".
Device files are in the /dev directory.

	$ls -l /dev
	crw-rw----+ 1 root     audio    14,   9 Apr 14 15:30 dmmidi
	drwxr-xr-x. 3 root     root         100 Apr 14 15:30 dri
	crw-rw----. 1 root     video    29,   0 Apr 14 15:30 fb0    

Note the first character of each line (the first character of the files' mode). If this character is b, c, p, or s, the file is a device.
These letters stand for: block, character, pipe, and socket.

Block device: a disk is an example of a block device, disks can be easily split into blocks of data that programs can access in fixed chucks.

Character device: Character devices work with data streams. You can only read characters from or write to character devices. Character devices don't have a size.
	
	$echo blah blah > /dev/null
	The echo command sends characters to dev/null device,. In this case the data is discarded.

Pipe device: Named pipes are like characted devices, with another process at the other end of the I/O stream instead of a kernel driver.

Socket device: Sockets are special purpose interfaces that are frequently used for interprocess communication. they're often found outside the /dev directory.

Note: Not all devices have device files. Network, interfaces don't have device files. You can interact with a network interface using a single character device, but it would be extremely difficult, so the kernel instead uses other I/O interfaces.


---The sysfs Device Path---

The /dev Unix directory is a convenient way for processes to reference and interface with devices supported by the kernel, but is also a very simplistic scheme.
The name /dev tells you little about the device, but another issue is that the kernel assigns devices in the order in which they are found, so a device may have different name between reboots.

To provide a uniform view for attached devices based on their actual hardware attributes, The kernel offers the "sysfs" interface through a system of files and directories. The base path for devices is /sys/devices.

Example: a SATA drive (sda) might have the following paths:

	$ls -l /dev
	$cd /sys/devices
	   $find . -name "sda"
	   ./pci0000:00/0000:00:10.0/host2/target2:0:0/2:0:0:0/block/sda

As you can see the path is quite long compared to /dev/sda file, which is also a directory. But the two paths serve different purposes:
1. The /dev file is there so that user processes can see the device
2. the /sys/devices path is used to view information and manage the device.

*Use ls -l /sys/block to reveal the true path of all system block devices, since symbolic links hide it.
It can be difficult to find the sysfs location of a device in /dev. Use the udevadm command to show the path and other attributes.

	$udevadm info --query=all --name=/dev/sda


---dd command and Devices---

THe program dd is useful when working with block and character devices. The program's sole function is to read from an intput or file stream and write to an output or file stream, doing some encoding along the way.
dd copies data in blocks of a fized size. e.g

	$dd if=/dev/zero of=new_file bs=1024 count=1

THe preceeding example copies a single 1024-byte block from /dev/zero (a continous stream of zero bytes) to new_file.
*dd formats is based on IBM job control language. You name an option and set its value with the equal sign.

Important dd options:

 *if=file   -The input file. Default is standard input.
 *of=file    -the output file. Default is the standard input
 *bs=size    -the block size. dd reads and writes this many bytes of data at a time. To abbreviate chunks of data, you can use (b and k) to signify (bytes, kilobytes) respectively.

 *ibs=size,obs=size    -The input and output block sizes. 
 *count=num    -the total number of blocks to copy. You want dd to stop at a fixed point. Use count with the  skip=  parameter to copy a small piece from a large file or device.
 *num   -Skip past the num blocks in the input file or stream and do not copy them to the output.

*NOte: dd is very powerful and is easy to currupt files and data over careless mistakes. write data to a new file if you're not sure what it'll do.


---Device Name summary---

To find the name of a device, here are some ways to find it out.

* query udevd using udevadm
* look for the device in the /sys dir
* guess the name from the output of dmesg command. (which prints the last few kernel messages)
* for a disk, check the output of mount command.
* run $ cat /proc/devices  to see block and character devices for which your system has drivers.

Note: The only reliable method is udev. 


---Hard disks--- /dev/sd*

Most hard disks attached to Linux correspond to device names with an "sd" prefix, such as /dev/sda, dev/sdb, and so on. These devices represent entire disks; the kernel makes separate device files, such as /dev/sda1 and /dev/sda2, for the partitions of a disk.

THe sd name stands for SCSI disk, although traditional SCSI hardware isn't used in modern systems, the SCSI protocol is everywhere for its compatibility.
To list the SCSI devices on your system use a utility that references sysfs. 

	$lsscsi
	[2:0:0:0]    disk    VMware,  VMware Virtual S 1.0   /dev/sda  
	1		2				     3
	
* The first column IDs the address of the device on the system.
* second column describes what kind of device it is.
* third column indicates where to find the device. (everything else is vendor information)

NOte: Linux assigns devices to device files in the order in which its drivers encounter devices.


PATA hard disks:
These LInux block devices /dev/hda, /dev/hdb, dev/hdc are common in older versions of the kernel. These devices are "fixed assignent-based" on the master/slave devices on interfaces 0 and 1.
NOte: at time you might find SATA drive recognized as "hd_", this means the SATA drive is running in compatibility mode which hinders performande. check BIOS.

CD and DVD drives:
THese devices are also SCSI devices, /dev/sr0, /dev/sr1 and so on. THe /dev/sr* devices are read-only, while /dev/sg0 have write and rewrite capabilities.

Terminals:
Terminals are devices for moving characters between a user process and an I/O device usually for text output to a terminal screen.

Pseudoterminal devices are emulated terminals, but rather than talk to hardware, the kernel presents the I/O interface to a piece of software, such as the shell terminal window where you type your commands.

Two common terminal devices are /dev/tty1 (first virtual console) and /dev/pts/0 (the first pseudoterminal device)
THe /dev/tty device is the controlling terminal of the current process. If a program i currently reading from and writing to a terminal, this device is a synonym for that terminal .A process does not need to be attached to a terminal.


---Display modes---

Linux had two primary display modes: text mode and X window system server.

If you want to see your text console after your system boots, press CTRL-ALT-F1. To return to the x11 session, press ALT-F2, ALT-F3, and so on until you get to the X session.

If you run into trouble switching consoles, you can try to force the system to change consoles with the 
chvt command. E.g , to switch to tty1, run the following as root.

	#chvt 1

take notes on 3.5 after done or when need udevdm



























